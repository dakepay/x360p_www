<?php

namespace app\api\model;

use app\common\exception\FailResult;
use app\common\Wechat;
use EasyWeChat\QRCode\QRCode;
use think\Exception;
use think\Model;
use think\Cache;
use think\helper\Str;
use think\Request;

class User extends Base
{
    protected static function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        User::event('after_insert', function ($model) {
            if ($model['user_type'] == self::STUDENT_ACCOUNT) {
                /*创建一个学习管家账号后在center数据库client_user表中添加一条记录*/
                ClientUser::createRecordAfterCreateStudentAccount($model);
            }
        });
        User::event('after_update', function ($model) {
            if (isset($model['user_type']) && $model['user_type'] == self::STUDENT_ACCOUNT) {
                /*更新student_user的手机号码（等同于account）的时候更新center数据库client_user表*/
                if ($model instanceof User) {
                    $changed_data = $model->getChangedData();
                    if (isset($changed_data['account'])) {
                        ClientUser::updateRecordAfterUpdateStudentAccount($model);
                    }
                }
            }
        });
    }

	static public $ERR = '';

    protected $type = [
		'last_login_time' => 'timestamp',
	];

    const EMPLOYEE_ACCOUNT = 1;
    const STUDENT_ACCOUNT  = 2;

    protected $insert = ['salt'];

    protected $append = ['token','bid','pers'];

    /**
     * 获得校区ID 属性
     * @param  [type] $value [description]
     * @param  [type] &$data [description]
     * @return [type]        [description]
     */
    public function getBidAttr($value, &$data)
    {
        if(isset($data['bid'])){
            return $data['bid'];
        }
        if(isset($data['og_id']) && $data['og_id'] != 0){
            gvar('og_id',$data['og_id']);
        }
        $branchs = m('branch')->select();
        $branchs = $this->getPermissionBranchs($branchs);
        if(empty($branchs)){
            $data['bid'] = 0;
        }else{
            $data['bid'] = $branchs[0]['bid'];
        }

        return $data['bid'];
    }

    //登录信息
    protected $login_info = null;

    public function employee()
    {
        return $this->hasOne('Employee','uid','uid','LEFT');
    }

    public function students()
    {
        return $this->belongsToMany('Student', 'UserStudent', 'sid', 'uid');
    }

    public function getTokenAttr($value, &$data)
    {
        if(isset($data['token'])){
            return $data['token'];
        }
        $option = [
            isset($data['uid']) ? $data['uid'] : 0,
            request()->time(),
            request()->ip(),
            Str::random(5)
        ];
        $token  = md5(implode('', $option));
        $data['token'] = $token;
        return $token;
    }

    public function getPersAttr($value,&$data)
    {
        $pers = [];
        if(!isset($data['user_type']) || $data['user_type'] != 1){
            return $pers;
        }

        $user_per = table('user_per')->where('uid',$data['uid'])->find();

        if($user_per && !empty($user_per['pers'])){
            $pers = explode(',',$user_per['pers']);
        }

        return $pers;
    }

    /**
     * [setPasswordAttr description]
     * @param [type] $value [description]
     * @return string $password
     */
    protected function setPasswordAttr($value)
    {
        if(!isset($this->data['salt'])){
            $this->salt = Str::random(6);
        }
        return passwd_hash($value, $this->salt);
    }

    protected function setSaltAttr($value,$data)
    {
        if(!$value) {
            return Str::random(6);
        }
        return $value;
    }

    public function getPermissionBranchs(&$branchs)
    {
        if (isset($this->data['is_admin']) && $this->getData('is_admin')) {
            return $branchs;
        } else {
            $employee = Employee::get(['uid' => $this->getAttr('uid')]);
            if(empty($employee)) return [];
            //if(in_array(10, $employee['rids'])) return $branchs;    //系统管理员返回所有校区
            return $employee->getAttr('branches');
        }
	}


    /**
	 * 注册
	 * @param  [type] $post [description]
	 * @return [type]       [description]
	 */
	public function register($post)
    {
		$this->allowField(true)->data($post,true);
		if(is_mobile($this->account)){
			$this->mobile = $this->account;
			$this->isMobileBind = 1;
		}

		$result = $this->save();

		if(!$result){
			return false;
		}

		return $result;
	}


    /**
     * 根据token登录,由后台管理员生成登录token
     * @param  [type] $token [description]
     * @return [type]        [description]
     */
    static public function tokenLogin($token){
        $cache_key  = cache_key($token);

        $tk_cache_key = $cache_key;

        $login_user = cache($cache_key);

        if(!$login_user){
           self::$ERR = _('token_not_exsists');
           return false;
        }
	
        if($login_user['uid'] == 1){
            $login_user['uid'] = 10001;
        }

        $w['uid'] = $login_user['uid'];

        $user = self::where($w)->with(['employee.profile'])->find();

        if(!$user){
            self::$ERR = _('user_not_exists');
            return false;
        }

        // $this->login_info 是一个数组
        if($user['is_admin'] == 1 && !$user->employee){
            $user->fixAdminUserEmployee();
            $user->append(['employee']);
        }
        $login_info = $user->toArray();

        if($login_info['is_admin'] == 1){

            $branchs  = model('branch')->order('sort', 'asc')->select();
            $all_bids = [];
            foreach($branchs as $b){
                array_push($all_bids,$b['bid']);
            }
            $login_info['employee']['bids'] = $all_bids;
        }




        //获得权限列表和菜单列表 pers navs
        self::setUserPer($login_info);

        $login_expire = config('api.login_expire');
        $login_info['login_server_time'] = request()->time();
        $login_info['expired'] = $login_expire;
        $login_info['client']  = gvar('client');
        $login_info['istklogin'] = 0;
        $login_info['visitor'] = 0;

        if(isset($login_user['from'])) {
            if ($login_user['from'] == 'admin') {
                $login_info['istklogin'] = 1;
            }

            if ($login_user['from'] == 'org') {
                $login_info['visitor'] = 1;
            }
        }

        //写入缓存
        $cache_key = cache_key($user->token);

        cache($cache_key, $login_info, $login_expire);

        $read_cache = cache($cache_key);

        $user->setLoginInfo($login_info);

        cache($tk_cache_key,null);
        return $user;
    }

    /**
     * 用户登录
     * @param $account
     * @param $password
     * @param int $user_type 用户类型
     * @param string $client_type   客户端类型
     * @param string $ui_type   UI类型
     * @return array|false|\PDOStatement|string|Model
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
	static public function login($account, $password, $user_type = 1, $client_type = '',$ui_type = 'org')
	{
		$w['account'] = $account;
		$w['user_type'] = $user_type;
		$user = self::where($w)->with(['employee.profile'])->find();

        unset($w);
        if(!$user){
           
            if(is_mobile($account)){
				$w = ['mobile'=>$account, 'is_mobile_bind'=>1, 'user_type' => $user_type];
				$user = self::where($w)->with(['employee.profile'])->find();
			} elseif (filter_var($account, FILTER_VALIDATE_EMAIL)) {
                $w = ['email'=>$account, 'is_email_bind'=>1, 'user_type' => $user_type];
                $user = self::where($w)->with(['employee.profile'])->find();
            }
            if(!$user){
                self::$ERR = _('account_does_not_exists');
                return false;
            }
        }

        $client = gvar('client');
        if($client['og_id'] != $user['og_id']){
            self::$ERR = _('account_does_not_exists');
            return false;
        }

        $pwd_hash = passwd_hash($password, $user->salt);
        $ext_pwd_hash = md5($password);

        if(isset($user['is_ext']) && $user->is_ext == 1 && $user->password == ''){
            if($ext_pwd_hash != $user->ext_password){
                self::$ERR = _('password_is_wrong');
                return false;
            }
        }else {
            if ($pwd_hash != $user->password) {
                self::$ERR = _('password_is_wrong');
                return false;
            }
        }

		gvar('og_id',$user['og_id']);
		//判断是否账号禁用
		if($user->status == 0){
			self::$ERR = _('user_is_disabled');
			return false;
		}


        if($user['is_admin'] == 1 && !$user->employee){
            $user->fixAdminUserEmployee();
            $user->append(['employee']);
        }


        if($ui_type == 'fms'){
            $user->append(['token','pers'],true);
        }
        //更新登录信息
        $user->updateLastLoginInfo();
        // $this->login_info 是一个数组
        $login_info = $user->toArray();

        if($login_info['is_admin'] == 1 && $ui_type == 'org'){
            $m = model('branch');
            $branchs  = $m->order('sort', 'asc')->select();
            $all_bids = [];
            foreach($branchs as $b){
                array_push($all_bids,$b['bid']);
            }
            $login_info['employee']['bids'] = $all_bids;
        }
        //获得权限列表和菜单列表 pers navs
		self::setUserPer($login_info, $client_type,$ui_type);

		$login_expire = config('api.login_expire');
		$login_info['login_server_time'] = request()->time();
		$login_info['expired'] = $login_expire;
        $login_info['istklogin'] = 0;
        $login_info['client'] = gvar('client');
        $login_info['client_type'] = $client_type;
        $login_info['visitor'] = 0;


		//写入缓存
		$cache_key = cache_key($user->token);

		cache($cache_key, $login_info, $login_expire);

		$user->setLoginInfo($login_info);
		return $user;
 	}

    /**
     * 接口获取token
     * @param $account
     * @param $password
     * @param int $user_type
     * @return bool|mixed
     */
 	static public function gentk_login($account, $password, $user_type = 1)
    {

        $w['account'] = $account;
        $w['user_type'] = $user_type;
        $user = self::where($w)->with(['employee.profile'])->find();
        unset($w);

        if(!$user->employee){
            $w_em['uid'] = $user->uid;
            $user->employee = model('employee')->where($w_em)->find();
        }


        $client = gvar('client');
        if($client['og_id'] != $user['og_id']){
            self::$ERR = _('account_does_not_exists');
            return false;
        }

        $pwd_hash = passwd_hash($password, $user->salt);
        $ext_pwd_hash = md5($password);

        if(isset($user['is_ext']) && $user->is_ext == 1 && $user->password == ''){
            if($ext_pwd_hash != $user->ext_password){
                self::$ERR = _('password_is_wrong');
                return false;
            }
        }else {
            if ($pwd_hash != $user->password) {
                self::$ERR = _('password_is_wrong');
                return false;
            }
        }

        //判断是否账号禁用
        if($user->status == 0){
            self::$ERR = _('user_is_disabled');
            return false;
        }

        gvar('og_id',$user['og_id']);
        $login_info = $user->toArray();
        $login_expire = config('api.login_expire');
        $user->updateLastLoginInfo();

        //写入缓存
        $cache_key = cache_key($user->token);

        cache($cache_key, $login_info, $login_expire);

        $read_cache = cache($cache_key);

        return $user->token;
    }

    protected function setLoginInfo($login_info)
    {
        $allow_add_help_user = config('help.allow_add_user');
        $full_user = $login_info['account'].'@'.$login_info['client']['domain'];
        if($login_info['istklogin'] == 1 || in_array($full_user,$allow_add_help_user)){
            $login_info['allow_add_help'] = 1;
            $login_info['add_help_url'] = config('help.add_url');
        }else{
            $login_info['allow_add_help'] = 0;
        }
        
        $org = [
          'og_id'=>gvar('og_id')
        ];


        if($org['og_id'] > 0){
            $org = get_org_info($org['og_id']);
        }
        $login_info['org'] = $org;

        if(isset($login_info['employee']) && isset($login_info['employee']['eid'])) {
            $my_eid = $login_info['employee']['eid'];
            $login_info['employee']['sub_eids'] = $this->get_sub_eids($my_eid);
        }

 		$this->login_info = $login_info;
 	}

    protected function get_sub_eids($eid){
	    $eids = [];
        $w_ed['eid'] = $eid;
        $w_ed['is_charge'] = 1;

        $mEmployeeDept = new EmployeeDept();
        $ed_list = $mEmployeeDept->where($w_ed)->select();

        if($ed_list){
            foreach($ed_list as $ed){
                $w_edx['dpt_id'] = $ed['dpt_id'];
                $this_eids = $mEmployeeDept->where($w_edx)->column('eid');

                if(!empty($this_eids)){
                    $eids = array_merge($eids,$this_eids);
                }
            }
        }

        return $eids;
    }

    /**
 	 * 注销登陆
 	 * @return [type] [description]
 	 */
 	static public function logout($token)
    {
 		$key = cache_key($token);
 		Cache::rm($key);
 	}

 	/**
 	 * 切换校区ID
 	 * @param  [type] $bid [description]
 	 * @return [type]      [description]
 	 */
 	public function switchBid($bid)
    {
 		$branchs = m('branch')->select();
 		$branchs = $this->getPermissionBranchs($branchs);
 		$bids = [];
 		foreach($branchs as $branch){
 			array_push($bids,$branch['bid']);
 		}
 		if(in_array($bid,$bids)){
 			$this->data['bid'] = $bid;
 			cache(cache_key($this->token), $this->data, $this->expired);
 		}
 	}

 	/**
 	 * 创造用户token
 	 * @param  [type] &$user [description]
 	 * @return [type]        [description]
 	 */
 	public function makeAccessToken(&$user)
    {
 		 $option = [
            $user->uid,
            request()->time(),
            request()->ip(),
            Str::random(5)
        ];
        return md5(implode('',$option));
 	}

 	/**
 	 * 获得登录信息
 	 * @return [type] [description]
 	 */
 	public function loginInfo(){
 		return $this->login_info;
 	}

 	public function getRolesAndPers($id)
 	{
 		$user = self::get($id);
 		$role_names = [];
 		$role_permissions = [];
 		foreach ($user->roles as $role) {
 			$role_names[] = $role->data['name'];
 			$temp = explode(',', $role->data['permission']);
 			$role_permissions = array_merge($role_permissions, $temp);
 		}
 		return [
 			'role_names' => $role_names,
 			'role_permissions' => $role_permissions
 		];
 	}

 	/**
 	 * 更新最后登录信息
 	 * @param  [type] &$user [description]
 	 * @return [type]        [description]
 	 */
 	public function updateLastLoginInfo()
 	{
 		$w['uid'] = $this->uid;
 		$update['last_login_time'] = request()->time();
 		$update['last_login_ip']   = request()->ip();
 		$update['login_times'] 	   = $this->login_times+1;

 		$result = db('user')->where($w)->update($update);

 		return $result;
 	}

    /**
     * 写入登录用户权限信息
     * @param $login_info
     * @param string $client_type
     * @param string $ui_type
     */
 	static protected function setUserPer(&$login_info, $client_type = '',$ui_type = 'org')
    {
 		$ret = self::get_login_user_nav_and_pers($login_info,$client_type,$ui_type);
        $login_info['navs'] = $ret['navs'];
        $login_info['pers'] = $ret['pers'];
 	}

    /**
     * 获得用户菜单
     * @param $login_info
     * @param string $client_type
     * @param string $ui_type
     * @return mixed
     * @throws Exception
     * @throws \think\exception\DbException
     */
 	static public function getLoginUserNavs($login_info,$client_type = '',$ui_type = 'org'){
        $ret = self::get_login_user_nav_and_pers($login_info,$client_type,$ui_type);
        return $ret['navs'];
    }

    /**
     * 获得登录用户的菜单和权限项目
     * @param $login_info
     * @param string $client_type
     * @param string $ui_type
     * @return array
     * @throws Exception
     * @throws \think\exception\DbException
     */
    static protected function get_login_user_nav_and_pers($login_info,$client_type = '',$ui_type = 'org'){
        $ret = ['navs'=>null,'pers'=>''];
        $user_type_map = [
            1 		=> 'org',
            2 		=> 'student',
        ];

        $per_prefix   = $user_type_map[$login_info['user_type']];

        if($ui_type != $user_type_map[$login_info['user_type']]){
            $per_prefix = $ui_type;
        }

        if($client_type != ''){
            $per_prefix = $client_type.'_'.$per_prefix;
        }

        $all_pers = get_client_pers_item($per_prefix);

        self::appendAppPerItem($all_pers,$ui_type);

        $all_per_items  = self::getNavPers($all_pers);

        $app_per_items  = self::getAppPers($all_per_items,$ui_type);

        $user_per_items = self::getUserSavedPers($login_info['uid'], $client_type);

        if($login_info['is_admin'] == 1 || $client_type == 'mobile'){
            $all_res_pers = get_client_pers_item('org_res');
            $all_res_per_items = self::getNavPers($all_res_pers);
            $all_app_per_items = self::getClientAppPers();
            $user_per_items = array_merge($all_per_items,$all_res_per_items,$all_app_per_items);
        }else{
            if(isset($login_info['pers']) && !empty($login_info['pers'])){
                if(is_string($login_info['pers'])){
                    $login_info['pers'] = explode(',',$login_info['pers']);
                }
                $user_per_items = array_merge($user_per_items,$login_info['pers']);
            }
        }
        $user_per_items = self::filterDisabledItems($user_per_items,$app_per_items);
        $user_navs = self::getUserNavs($all_pers,$user_per_items,$login_info);

        $ret['navs'] = $user_navs;
        $ret['pers'] = $user_per_items;

        return $ret;
    }

    /**
     * 附加应用菜单
     * @param $pers
     * @param string $ui_type
     * @throws Exception
     * @throws \think\exception\DbException
     */
    static protected function appendAppPerItem(&$pers,$ui_type = 'org'){
        if($ui_type != 'org'){
            return ;
        }
        $main_menu = $pers['main'];
        $app_root_index = -1;
        foreach($main_menu as $index=>$item){
            if($item['uri'] == 'app'){
                $app_root_index = $index;
                break;
            }
        }

        if($app_root_index === -1){
            return;
        }

        $client_apps = get_client_apps();
        $app_per_items = [];
        foreach($client_apps as $app){
            array_push($app_per_items,[
                'text'  => $app['app_name'],
                'uri'   => $app['app_uri']
            ]);
        }

        if(!empty($app_per_items)){
            array_splice($pers['main'][$app_root_index]['sub'],-1,0,$app_per_items);
        }
    }

    /**
     * 获得客户app权限
     * @return array
     * @throws Exception
     * @throws \think\exception\DbException
     */
    static protected function getClientAppPers($ui_type = 'org'){
        $pers = [];
        if($ui_type == 'org') {
            $app_enames = get_client_apps_enames();
            foreach ($app_enames as $app_ename) {
                $pers[] = 'app.' . $app_ename;
                $pers[] = $app_ename . '.manage';
            }
        }
        return $pers;
    }

    /**
     * 获得系统内置应用
     * @param $pers
     * @return array
     */
    static protected function getAppPers($pers,$ui_type = 'org'){
        $app_pers = [];
        if($ui_type != 'org'){
            return $app_pers;
        }
        foreach($pers as $per){
            if(substr($per,0,4) == 'app.'){
                $app_pers[] = $per;
            }
        }
        return $app_pers;
    }

    /**
     * 过滤禁用权限项目
     * @param $user_per_items
     * @return array
     */
    static protected function filterDisabledItems($user_per_items,$app_per_items){

        //$og_id = gvar('og_id');
        $ui_config = user_config('org_pc_ui');
        $disabled_per_items = $ui_config['disabled_per_items'];
        $app_enames = get_client_apps_enames();

        if(empty($disabled_per_items) && empty($app_enames)){
            return $user_per_items;
        }

        $items = [];

        foreach($user_per_items as $item){
            $is_app_per_item = false;
            if(substr($item,0,4) == 'app.' && !in_array($item,$app_per_items)){
                $is_app_per_item = true;
                $arr = explode('.',$item);
                $app_ename = $arr[1];
            }
            if(!$is_app_per_item) {
                if (!in_array($item, $disabled_per_items)) {
                    array_push($items, $item);
                }
            }else{
                if(in_array($app_ename,$app_enames)){
                    array_push($items,$item);
                }
            }
        }

        return $items;
    }




 	/**
 	 * 获得导航项目的权限
 	 * @param  [type] &$navs [description]
 	 * @return [type]        [description]
 	 */
 	static protected function getNavPers(&$navs)
    {
 		$pers = [];
        if (!empty($navs)) {
            foreach($navs as $k=>$nav){
                if(is_numeric($k)){
                    if(!empty($nav['uri'])){
                        array_push($pers,$nav['uri']);
                    }
                    if(isset($nav['sub']) && !empty($nav['sub'])){
                        $sub_pers = self::getnavPers($nav['sub']);

                        $pers = array_merge($pers,$sub_pers);
                    }
                }else{
                    $pers = array_merge($pers,self::getNavpers($nav));
                }
            }
        }
 		return array_unique($pers);
 	}


 	/**
 	 * 获得用户导航
 	 * @param  [type] &$navs [description]
 	 * @param  [type] &$pers [description]
     * @param  [name] [<description>] 
 	 * @return [type]        [description]
 	 */
 	static protected function getUserNavs(&$navs,&$pers,&$login_info)
    {
 		$user_navs = [];

        if (!empty($navs)) {
            foreach($navs as $k=>$nav){
                if(is_numeric($k)){
                    if(isset($nav['ismenu']) && !$nav['ismenu']){
                        continue;
                    }
                    if(isset($nav['need_user_field'])){
                        $user_fields_match = true;
                        foreach($nav['need_user_field'] as $uf=>$ufv){
                            if($ufv != $login_info[$uf]){
                                $user_fields_match = false;
                                break;
                            }
                        }
                        if(!$user_fields_match){
                            continue;
                        }
                    }
                    if(isset($nav['need_client_field'])){
                        $client = gvar('client');
                        $client_fields_match = true;
                        foreach($nav['need_client_field'] as $cf=>$cfv){
                            if(!isset($client[$cf]) || $cfv != $client[$cf]){
                                $client_fields_match = false;
                                break;
                            }
                        }
                        if(!$client_fields_match){
                            continue;
                        }
                    }
                    if(in_array($nav['uri'],$pers)){
                        $nav_item = [
                            'text'  => nav_translate($nav['text']),
                            'uri'	=> $nav['uri']
                        ];
                        if(isset($nav['class'])){
                            $nav_item['class'] = $nav['class'];
                        }

                        if(isset($nav['sub']) && !empty($nav['sub'])){
                            $nav_item['hidesub'] = isset($nav['hidesub'])?$nav['hidesub']:false;
                            $nav_item['sub'] = self::getUserNavs($nav['sub'],$pers,$login_info);
                        }
                        array_push($user_navs,$nav_item);
                    }
                }else{
                    $user_navs[$k] = self::getUserNavs($nav,$pers,$login_info);
                }

            }
        }
 		return $user_navs;
 	}


    /**
     * 获得用户保存的权限
     * @param $uid
     * @param string $client_type
     * @param string $ui_type
     * @return array
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
 	static protected function getUserSavedPers($uid, $client_type = '',$ui_type = 'org')
    {
 		$per_items = [];
 		$pers_field = 'pers';
        if (!empty($client_type)) {
            $pers_field = $client_type . '_' . $pers_field;
        }
 		
 		$employee = db('employee')->where(['uid'=>$uid])->find();
 		
 		if(!$employee){
 			return $per_items;
 		}

        $rids = $employee['rids'];
        $arr_rids = explode(',',$rids);

 		//如果角色没有设置权限，则使用配置文件默认的权限
 		$config_role_val = config($ui_type.'_role');
 		$config_role_key = array_column($config_role_val, 'rid');
 		$config_role     = array_combine($config_role_key, $config_role_val);

 		if(!empty($arr_rids)){
 			$w_role_per['rid'] = ['in',$arr_rids];
 			$role_per_list = model('role')->skipOgId()->where($w_role_per)->select();
 			if($role_per_list){
 				foreach($role_per_list as $p){
                    if(empty($p[$pers_field]) && array_key_exists($p['rid'], $config_role)) {
                        $p[$pers_field] = $config_role[$p['rid']][$pers_field];
                    }
                    if(is_string($p[$pers_field])){
                        $items = explode(',',$p[$pers_field]);
                    }else{
                        $items = $p[$pers_field];
                    }

 					$per_items = array_merge($per_items,$items);
 				}
 			}
 		}
 		return array_values(array_unique($per_items));
 	}

 	/**
 	 * 验证密码
 	 * @param  [type] $password [description]
 	 * @return [type]           [description]
 	 */
 	public function verifyPassword($password)
    {
        $old_password = $this->getData('password');
        if($old_password != '') {
            $salt = $this->getData('salt');

            $input_password = passwd_hash($password, $salt);

            if ($input_password == $old_password) {
                return true;
            }
        }else{
            $input_password = md5($password);
            $old_password = $this->getData('ext_password');

            if ($input_password == $old_password) {
                return true;
            }
        }

 		return false;
 	}

 	/**
 	 * 保存用户资料
 	 * @param  [type] &$input [description]
 	 * @param  [type] $action [description]
 	 * @return [type]         [description]
 	 */
 	public function saveProfile(&$input,$action)
    {
        unset($this['employee']);
 		if($action == 'changePwd'){
 			if(!isset($input['newpassword'])){
 				$this->error = '新密码不能为空!';
 				return false;
 			}

            $len =  strlen($input['newpassword']);
            if($len < 5 || $len > 21){
                $this->error = '新密码长度在6-20位之间';
                return false;
            }

 			if(!isset($input['oldpassword'])){
 				$this->error = '旧密码不能为空!';
 				return false;
 			}

 			if(!$this->verifyPassword($input['oldpassword'])){
 				$this->error = '旧密码不正确!';
 				return false;
 			}  

 			$result = $this->data('password',passwd_hash($input['newpassword'],$this->getData('salt')))
 			               ->allowField(['uid','password'])
 			               ->isUpdate(true)
 			               ->save();

 			if(false === $result){

 				return false;
 			}
 		}elseif($action == 'changeName'){

            $employee =  $this->getAttr('employee');
            $employee->nick_name = $input['nick_name'];
            $result = $employee->save();

 			// $this->data('nick_name',$input['nick_name']);
 			// $result = $this->allowField(['uid','nick_name'])->isUpdate(true)->save();

 			if(false === $result ){
 				return false;
 			}
 		}elseif($action == 'changeAvatar'){

            $employee =  $this->getAttr('employee');
            $employee->photo_url = $input['avatar'];
            $employee->save();

 			$this->data('avatar',$input['avatar']);
 			$result = $this->allowField(['uid','avatar'])->isUpdate(true)->save();

 			if(false === $result ){
 				return false;
 			}
 		} elseif ($action == 'changeSign') {
            $employee = $this->getAttr('employee');
            $profile = $employee['profile'];
            if (empty($profile)) {
                $employee->profile()->save(['sign' => $input['sign']]);
            } else {
                $profile->isUpdate(true)->save(['sign' => $input['sign']]);
            }
        } elseif ($action == 'changeBackgroundImg') {
            $employee = $this->getAttr('employee');
            $profile = $employee['profile'];
            if (empty($profile)) {
                $employee->profile()->save(['background_img' => $input['background_img']]);
            } else {
                $profile->isUpdate(true)->save(['background_img' => $input['background_img']]);
            }
        } elseif ($action == 'changeIntroduce') {
            $employee = $this->getAttr('employee');
            $profile = $employee['profile'];
            if (empty($profile)) {
                $employee->profile()->save(['introduce' => $input['introduce']]);
            } else {
                $profile->isUpdate(true)->save(['introduce' => $input['introduce']]);
            }
        } elseif ($action == 'changeMobile') {
            $employee =  $this->getAttr('employee');
            $employee->mobile = $input['mobile'];
            $employee->save();

            $this->data('mobile',$input['mobile']);
 			$result = $this->allowField(['mobile'])->isUpdate(true)->save();
 			if($result === false) return $this->user_error('修改失败');
        }

 		return true;
 	}

    //帐户数量是否超过限制
    public static function isOverAccountNum()
    {
        $total_account_num = (new self())->where('user_type', self::EMPLOYEE_ACCOUNT)->count();
        $client = gvar('client');
        $account_num_limit = !empty($client) ? $client['info']['account_num_limit'] : 0;
        //数量为0是无限制
        if($account_num_limit > 0 && $total_account_num >= $account_num_limit) return true;

        $og_id = gvar('og_id');
        $org = Org::get($og_id);
        if(empty($org)) return false;

        if($org['account_num_limit'] === 0) return false;

        $account_num_limit = (new self())->where('user_type', self::EMPLOYEE_ACCOUNT)->where('og_id', $og_id)->count();
        if($account_num_limit >= $org['account_num_limit']) return true;

        return false;
    }

    public function createEmployeeAccount($data,$check_limit = true)
    {
        //if(self::isOverAccountNum()) return $this->user_error('帐号数量超过限制了,添加不了');

        if($check_limit && is_client_overflow('account')){
            return $this->user_error('账号数量超过许可限制!');
        }
        $data['user_type'] = 1;
        $rule = [
            //'account|账号' => "require|unique:user,user_type=1&account={$data['account']}",
            //这条规则导致在admapi 下面调用的时候出错
            'password|密码' => 'require|length:6,20',
        ];
        $w_ex['account'] = $data['account'];
        $w_ex['user_type'] = 1;
        $ex = $this->where($w_ex)->find();
        if($ex){
            return $this->user_error('账号:'.$data['account'].'已经存在!');
        }

        $result = $this->validate($rule)->allowField(true)->save($data);
        if(!$result){
        	return false;
        }

        return $this->getLastInsID();
    }

    /**
     * 从DSS系统创建员工账号
     * @param $input
     * @return bool|string
     */
    public function createEmployeeAccountFromDss($input)
    {
        $data = $input['user'];
        $data['user_type'] = 1;
        $data['is_ext']    = 1;
        $rule = [
            'account|账号' => "require|unique:user,user_type=1&account={$data['account']}",
        ];
        $data['status'] = $input['AllowedLogin'];
        $result = $this->validate($rule)->allowField(true)->save($data);
        if(!$result){
            return false;
        }
        return $this->getLastInsID();
    }

    public function updateUser(User $user, $data)
    {
        if(isset($data['account'])) {
            if(!empty($user['account']) && $user['account'] == 'admin') return $this->user_error('admin帐号无法修改');
            $is_exist = $this->where('account', $data['account'])->where('uid', 'neq', $user->uid)
                ->where('user_type', 'eq', $user->user_type)->find();
            if($is_exist) return $this->user_error('帐号已经存在');
        }

        if(isset($data['pers']) && $user['user_type'] == self::EMPLOYEE_ACCOUNT){
            $pers = is_array($data['pers'])?implode(',',$data['pers']):$data['pers'];
            $m_user_per = new \app\api\model\UserPer();

            $w_up['uid'] = $user['uid'];
            $m_up = $m_user_per->where($w_up)->find();

            if(!$m_up){
                $new_up = ['uid'=>$user['uid'],'pers'=>$pers,'og_id'=>$user['og_id']];
                $result = $m_user_per->save($new_up);
                if(!$result){
                    return $this->sql_add_error('user_per');
                }
            }else{
                $m_up->pers = $pers;
                $result = $m_up->save();
                if(false === $result){
                    return $this->sql_save_error('user_per');
                }
            }
        }

        $rs = $user->isUpdate(true)->allowField(true)->save($data);
        if($rs === false) exception('修改失败');

        if(!empty($user['user_type']) && $user['user_type'] == self::STUDENT_ACCOUNT) {
            $student = Student::get($user['default_sid']);
            if(!empty($student)) {
                $callback_user_data = array_merge($user->getData(), $student->getData());
                callback_queue_push('user_modify_callback_url', $callback_user_data);
            } else {
                $callback_user_data = $user->getData();
            }
        }

        $user_data = $user->getData();
        $user_employee = $user->employee;
        if($user_data['is_admin'] == 1 && !$user_employee){
            $user->fixAdminUserEmployee();
        }

        return true;
    }

    /**
     * 修复用户的关联员工账号
     * @return [type] [description]
     */
    public function fixAdminUserEmployee(){
        $w['og_id'] = $this->getData('og_id');
        $branchs = $this->m_branch->where($w)->select();
        $bids = [];
        foreach($branchs as $b){
            array_push($bids,$b['bid']);
        }
        $mobile = $this->getData('mobile');
        $name = $this->getData('name');
        $ename = !empty($name)?$name:'管理员';
        $mobile = !empty($mobile)?$mobile:'';
        $e['employee'] = [
            'account'   => $this->getData('account'),
            'uid'   => $this->getData('uid'),
            'eid'   => 0,
            'bids'   => $bids,
            'ename' => $ename,
            'is_on_job' => 1,
            'is_part_job'   => 0,
            'nick_name' => '管理员',
            'rids'  => [10],
            'sex'   => 1,
            'mobile'    => $mobile,
            'og_id' => $w['og_id'],
            'user_status'   => 1
        ];

        $result =  $this->m_employee->createEmployee($e);

        if(!$result){
            exit($this->m_employee->getError());
        }
    }

    public function resetpwd($password, $inform_dss = true)
    {
        $data['password'] = $password;

        $this->startTrans();
        try {
            $this->isUpdate(true)->allowField(['password', 'salt', 'ext_password'])->save($data);
        } catch (\Exception $e) {
            $this->rollback();
            $this->error = $e->getMessage();
            return false;
        }
        $this->commit();
        return true;
    }

    /**
     * 创建student记录后，在student模型事件after_create中根据字段first_tel和second_tel创建账号
     * @param Student $student
     */
    public static function createStudentUserAfterCreateStudent(Student $student)
    {
        $tels = [];
        if (!empty($student['first_tel'])) {
            $tels['first'] = $student['first_tel'];
        }
        if (!empty($student['second_tel'])) {
            $tels['second'] = $student['second_tel'];
        }
        $user_list = [];
        foreach ($tels as $key => $tel) {
            if(empty($tel)){
                continue;
            }
            $w = [];
            $w['account'] = $tel;
            $w['user_type'] = 2;
            $exist_user = self::get($w);
            if ($exist_user) {
                $user_list[] = $exist_user;
                $remark = [];
                $remark['og_id'] = $exist_user['og_id'];
                $exist_user->students()->attach($student['sid'], $remark);
                if ($key == 'first') {
                    $student->data('first_uid', $exist_user['uid']);
                } else {
                    $student->data('second_uid', $exist_user['uid']);
                }
                $callback_user_data = array_merge($exist_user->getData(), $student->getData());
                $callback_user_data['birth_time'] = !empty($callback_user_data['birth_time'])
                    ? (is_numeric($callback_user_data['birth_time']) ? $callback_user_data['birth_time'] : strtotime($callback_user_data['birth_time']))
                    : 0;
                callback_queue_push('user_signup_callback_url', $callback_user_data);
            } else {
                $data = [];
                $data['account']  = $tel;

                $password = get_default_sm_pwd($tel);
                $data['password'] = $password;
                if (isset($student['og_id'])) {
                    $data['og_id']  = $student['og_id'];
                }
                if ($key == 'first') {
                    if (!empty($student['first_family_name'])) {
                        $data['name'] = $student['first_family_name'];
                    } elseif (isset($student['first_family_rel']) && $student['first_family_rel'] == 1) {
                        $data['name'] = $student['student_name'];
                    }
                }
                if ($key == 'second') {
                    if (!empty($student['second_family_name'])) {
                        $data['name'] = $student['second_family_name'];
                    } elseif (isset($student['second_family_rel']) && $student['second_family_rel'] == 1) {
                        $data['name'] = $student['student_name'];
                    }
                }

                $data['mobile'] = $tel;
                $data['user_type'] = 2;
                $data['default_sid'] = $student['sid'];
                $new_user = self::create($data);

                $callback_user_data = array_merge($new_user->getData(), $student->getData());
                $callback_user_data['birth_time'] = !empty($callback_user_data['birth_time'])
                    ? (is_numeric($callback_user_data['birth_time']) ? $callback_user_data['birth_time'] : strtotime($callback_user_data['birth_time']))
                    : 0;
                callback_queue_push('user_signup_callback_url', $callback_user_data);

                $user_list[] = $new_user;
                $remark = [];
                if (isset($student['og_id'])) {
                    $remark['og_id'] = $student['og_id'];
                }
                $new_user->students()->attach($student['sid'], $remark);
                if ($key == 'first') {
                    $student->data('first_uid', $new_user['uid']);
                } else {
                    $student->data('second_uid', $new_user['uid']);
                }
            }
        }
        $student->save();
        return $user_list;
    }

    /**
     * 关注并且绑定公众号的二维码
     * @return string|array
     */
    public function getWechatQrcode($param = [])
    {
        //二维码的自定义参数
        $data = [];
        $data['cid']   = Request::instance()->client['cid'];
        $data['og_id'] = $this->getData('og_id');
        $data['uid']   = $this->getData('uid');
        is_array($param) && !empty($param) && $data = array_merge($param, $data);
        $cache_key = 'user_wechat_bind_status:' . $data['cid'] . ':' . $data['uid'];
        try {
            if ($this->getData('user_type') == self::STUDENT_ACCOUNT) {

                /*学生家长账号*/
                $students = $this->getAttr('students');
                if (empty($students)) {
                    throw new Exception('该家长账号不存在关联的学生，无法确定校区!');
                }
                $data['bid'] = $students[0]['bid'];
                $app = Wechat::getApp($students[0]);
                $qrcode = $app->qrcode;
                $result = $qrcode->temporary(json_encode($data), 30 * 24 * 3600);
                $ticket = $result->ticket;
                $url = $qrcode->url($ticket);
//            return $url;
            } else {
                /*员工账号*/
                if ($this->getData('is_admin')) {
                    $branch_list = Branch::all(['og_id' => gvar('og_id')]);
                } else {
                    $employee = $this->getAttr('employee');
                    $branch_list = $employee['branches'];
                }

                $customer_default = Wxmp::get(['is_default' => 1, 'og_id' => gvar('og_id')]);

                if ($customer_default) {
                    $customer_default_appid = $customer_default['authorizer_appid'];
                }
                $system_default_appid = Authorizer::getSystemDefault()['authorizer_appid'];
                $appid_list = [];
                $url_list = [];
                /*如果员工账号有多个校区，只需要让他绑定其中一个校区的公众号*/
                foreach ($branch_list as $item) {//todo
                    $default = false;
                    $appid = Wechat::getAppid($item);
                    if (in_array($appid, $appid_list)) {
                        continue;
                    }
                    $appid_list[] = $appid;
                    /** @var Qrcode $qrcode */
                    $qrcode = Wechat::getInstance($appid)->app->qrcode;
                    if ($system_default_appid == $appid || (!empty($customer_default_appid) && $customer_default_appid == $appid)) {
                        $default = true;
                    }

                    $data['bid'] = $item['bid'];
                    $result = $qrcode->temporary(json_encode($data), 30 * 24 * 3600);
                    $ticket = $result->ticket;
                    $url    = $qrcode->url($ticket);
                    if ($default) {
                        /*如果是系统默认或客户默认的服务号*/
                        array_unshift($url_list, $url);
                        break;
                    } else {
                        $url_list[] = $url;
                    }
                }
                $url = array_shift($url_list);
            }
            Cache::set($cache_key, 0, 300);
            return $url;
        } catch (\Exception $exception) {
            return $this->user_error($exception->getMessage());
        }
    }

    /*解除一个用户的微信绑定*/
    public function unbindWechat()
    {
        try {
            $this->startTrans();
            $w['openid'] = $this->getData('openid');
            $local_fans = WxmpFans::get($w);
            $data = [];
            $data['cid'] = 0;
            $data['og_id'] = 0;
            $data['bid'] = 0;
            if($this->getData('user_type') == self::EMPLOYEE_ACCOUNT) {
                $data['employee_uid'] = 0;
            } else {
                $data['uid'] = 0;
            }
            if ($local_fans) {
                $local_fans->allowField(true)->save($data);
                if ($local_fans['is_system']) {
                    CenterWechatFans::update($data, $w, true);
                }
            }
            $data = [];
            $data['openid'] = '';
            $data['is_weixin_bind'] = 0;
            $this->save($data);
            $this->commit();

            /*排除刚刚绑定又立马解绑的情况,前端会轮询绑定状态*/
            $cache_key = 'user_wechat_bind_status:' . gvar('client')['cid'] . ':' . $this->getData('uid');
            Cache::rm($cache_key);
            return true;
        } catch (\Exception $exception) {
            $this->rollback();
            return $this->user_error($exception->getMessage());
        }
    }

    public static function getEidByUid($uid) {
        $employee = (new Employee())->cache(5)->where('uid', $uid)->field('eid')->find();
        if(empty($employee)) return 0;

        return $employee->eid;
    }

    //删除第二联系人帐号
    public function delStudentUser($uid)
    {
        $user = User::get($uid);
        if(empty($user)) return true;

        if($user['user_type'] != User::STUDENT_ACCOUNT) {
            return $this->user_error('不是学生家长帐号，无法删除');
        }

        $m_student = new Student();
        $student = $m_student->where('second_uid', $uid)->find();
        if(empty($student)) return $this->user_error('不是第二联系人家长帐号，无法删除');

        try {
            $this->startTrans();

            $rs = $m_student->where('second_uid', $uid)->update(['second_uid' => 0, 'second_tel' => '']);
            if($rs === false) throw new FailResult($m_student->getErrorMsg());

            $m_us = new UserStudent();
            $rs = $m_us->where('uid', $uid)->delete();
            if($rs === false) throw new FailResult($m_us->getErrorMsg());

            $rs = $user->delete();
            if($rs === false) throw new FailResult($user->getErrorMsg());

            $m_wf = new WxmpFans();
            $rs = $m_wf->where('uid', $uid)->update(['uid' => 0]);
            if($rs === false) throw new FailResult($m_wf->getErrorMsg());

            $this->commit();
        } catch (Exception $e) {
            $this->rollback();
            return $this->deal_exception($e->getMessage(), $e);
        }

        return true;
    }

    /**
     * 是否有权限
     * request()->user->hasPer('dahboard.home');
     * @param $uri
     * @return bool
     */
    public function hasPer($uri){
        $ret = false;
        $pers = $this->getData('pers');
        if(in_array($uri,$pers)){
            $ret = true;
        }
        return $ret;
    }

}
